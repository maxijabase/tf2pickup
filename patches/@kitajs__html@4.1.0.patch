diff --git a/jsx-runtime.js b/jsx-runtime.js
index 32e2f7cd5821ebad638c02dfc8c3b24fe866f2b5..392a81950c7779db3815c7360ce2e0c73acae953 100644
--- a/jsx-runtime.js
+++ b/jsx-runtime.js
@@ -5,18 +5,18 @@ const {
   attributesToString,
   isVoidElement,
   contentsToString,
-  contentToString
-} = require('./index');
+  contentToString,
+} = require("./index");
 
 /** @type {import('./jsx-runtime').jsx} */
 function jsx(name, attrs) {
   // Calls the element creator function if the name is a function
-  if (typeof name === 'function') {
+  if (typeof name === "function") {
     return name(attrs);
   }
 
   // Switches the tag name when this custom `tag` is present.
-  if (name === 'tag') {
+  if (name === "tag") {
     name = String(attrs.of);
   }
 
@@ -24,30 +24,30 @@ function jsx(name, attrs) {
 
   if (attrs.children === undefined) {
     return isVoidElement(name)
-      ? '<' + name + attributes + '/>'
-      : '<' + name + attributes + '></' + name + '>';
+      ? "<" + name + attributes + "/>"
+      : "<" + name + attributes + "></" + name + ">";
   }
 
   const contents = contentToString(attrs.children, !!attrs.safe);
 
   if (contents instanceof Promise) {
     return contents.then(function resolveContents(child) {
-      return '<' + name + attributes + '>' + child + '</' + name + '>';
+      return "<" + name + attributes + ">" + child + "</" + name + ">";
     });
   }
 
-  return '<' + name + attributes + '>' + contents + '</' + name + '>';
+  return "<" + name + attributes + ">" + contents + "</" + name + ">";
 }
 
 /** @type {import('./jsx-runtime').jsxs} */
 function jsxs(name, attrs) {
   // Calls the element creator function if the name is a function
-  if (typeof name === 'function') {
+  if (typeof name === "function") {
     return name(attrs);
   }
 
   // Switches the tag name when this custom `tag` is present.
-  if (name === 'tag') {
+  if (name === "tag") {
     name = String(attrs.of);
   }
 
@@ -55,19 +55,19 @@ function jsxs(name, attrs) {
 
   if (attrs.children.length === 0) {
     return isVoidElement(name)
-      ? '<' + name + attributes + '/>'
-      : '<' + name + attributes + '></' + name + '>';
+      ? "<" + name + attributes + "/>"
+      : "<" + name + attributes + "></" + name + ">";
   }
 
   const contents = contentsToString(attrs.children, !!attrs.safe);
 
   if (contents instanceof Promise) {
     return contents.then(function resolveContents(child) {
-      return '<' + name + attributes + '>' + child + '</' + name + '>';
+      return "<" + name + attributes + ">" + child + "</" + name + ">";
     });
   }
 
-  return '<' + name + attributes + '>' + contents + '</' + name + '>';
+  return "<" + name + attributes + ">" + contents + "</" + name + ">";
 }
 
 const JsxRuntime = {
@@ -75,8 +75,11 @@ const JsxRuntime = {
   jsxs,
 
   // According to the jsx-runtime spec we must export the fragment element also
-  Fragment
+  Fragment,
 };
 
 module.exports = JsxRuntime;
+exports.jsx = jsx;
+exports.jsxs = jsxs;
+exports.Fragment = Fragment;
 module.exports.default = JsxRuntime;
